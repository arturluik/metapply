import os

from metapply.config import Config
from metapply.model.vulnerability import Vulnerability


class VulnerabilityLoader():

    def __init__(self):
        self.config = Config()
        self.vulnerabilities = self._load_vulnerabilities()

    def get(self):
        return self.vulnerabilities

    def find_by_name_and_version(self, name, version):
        for vulnerability in self.vulnerabilities:
            if vulnerability.name.lower() == name.lower():
                return vulnerability

        raise ModuleNotFoundError(
            'No such vulnerability with name ' + name + ' and version ' + version + ' was found')

    def _load_vulnerabilities(self):
        vulnerabilities = []
        for vulnerability in os.listdir(self.config.get('vulnerabilities_path')):
            vulnerabilities_path = os.path.join(
                self.config.get('vulnerabilities_path'), vulnerability)
            vulnerabilities.append(Vulnerability(
                vulnerability, vulnerabilities_path))

        return vulnerabilities
